const {writeFileSync, existsSync, readFileSync} = require('fs');
const dotenv = require('dotenv');

const envName = process.env.ENV || 'local-dev';

// Generate app-config.json from ENV Vars
// Priority: ENV VAR > .env > .env.local-dev
// Usage: node ./config-generator.js

// app-config.json in production is not generated by this script

/**
 * Reads given .env file
 *
 * @param path path to .env file
 * @return vars (Record<string, string>)
 */
const readEnvFileSync = (path) => {
  if (existsSync(path)) {
    return dotenv.parse(readFileSync(path));
  }
  return {};
};

/**
 * Filter object properties by applying filter fn to each key.
 *
 * @param obj any object
 * @param fn filter fn (applied to property name)
 * @return subset of obj
 */
const objFilterKeys = (obj, fn) =>
  Object.fromEntries(Object.entries(obj).filter(([k, _]) => fn(k)));

// Read ENV Vars from .env files as well
const allProps = {
  ...readEnvFileSync('.env.' + envName),
  ...readEnvFileSync('.env'),
  ...process.env,
};

// Collect ENV Vars with prefix AUTHORITY_PORTAL_FRONTEND_
const prefix = 'AUTHORITY_PORTAL_FRONTEND_';
const filteredProps = objFilterKeys(allProps, (k) => k.startsWith(prefix));
if (!Object.keys(filteredProps).length) {
  console.warn(
    `No ${prefix} configuration properties are set in ENV, application might not be configured properly.`,
  );
}

// Write app-config.json
const output = './src/assets/config/app-config.json';
const json = JSON.stringify(filteredProps);
writeFileSync(output, json);

// It is ok to log this config as the data will be available in all client browsers
console.log(`Writing app.config.json to ${output}: ${json}`);
